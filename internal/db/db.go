// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAPIKeyStmt, err = db.PrepareContext(ctx, createAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAPIKey: %w", err)
	}
	if q.createNotificationStmt, err = db.PrepareContext(ctx, createNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotification: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deactivateAPIKeyStmt, err = db.PrepareContext(ctx, deactivateAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeactivateAPIKey: %w", err)
	}
	if q.getAPIKeyByKeyStmt, err = db.PrepareContext(ctx, getAPIKeyByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetAPIKeyByKey: %w", err)
	}
	if q.getNotificationsByUserIDStmt, err = db.PrepareContext(ctx, getNotificationsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetNotificationsByUserID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.updateAPIKeyLastUsedStmt, err = db.PrepareContext(ctx, updateAPIKeyLastUsed); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAPIKeyLastUsed: %w", err)
	}
	if q.updateNotificationStatusStmt, err = db.PrepareContext(ctx, updateNotificationStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotificationStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAPIKeyStmt != nil {
		if cerr := q.createAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAPIKeyStmt: %w", cerr)
		}
	}
	if q.createNotificationStmt != nil {
		if cerr := q.createNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNotificationStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deactivateAPIKeyStmt != nil {
		if cerr := q.deactivateAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deactivateAPIKeyStmt: %w", cerr)
		}
	}
	if q.getAPIKeyByKeyStmt != nil {
		if cerr := q.getAPIKeyByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAPIKeyByKeyStmt: %w", cerr)
		}
	}
	if q.getNotificationsByUserIDStmt != nil {
		if cerr := q.getNotificationsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNotificationsByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.updateAPIKeyLastUsedStmt != nil {
		if cerr := q.updateAPIKeyLastUsedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAPIKeyLastUsedStmt: %w", cerr)
		}
	}
	if q.updateNotificationStatusStmt != nil {
		if cerr := q.updateNotificationStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNotificationStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createAPIKeyStmt             *sql.Stmt
	createNotificationStmt       *sql.Stmt
	createUserStmt               *sql.Stmt
	deactivateAPIKeyStmt         *sql.Stmt
	getAPIKeyByKeyStmt           *sql.Stmt
	getNotificationsByUserIDStmt *sql.Stmt
	getUserByEmailStmt           *sql.Stmt
	getUserByIDStmt              *sql.Stmt
	updateAPIKeyLastUsedStmt     *sql.Stmt
	updateNotificationStatusStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createAPIKeyStmt:             q.createAPIKeyStmt,
		createNotificationStmt:       q.createNotificationStmt,
		createUserStmt:               q.createUserStmt,
		deactivateAPIKeyStmt:         q.deactivateAPIKeyStmt,
		getAPIKeyByKeyStmt:           q.getAPIKeyByKeyStmt,
		getNotificationsByUserIDStmt: q.getNotificationsByUserIDStmt,
		getUserByEmailStmt:           q.getUserByEmailStmt,
		getUserByIDStmt:              q.getUserByIDStmt,
		updateAPIKeyLastUsedStmt:     q.updateAPIKeyLastUsedStmt,
		updateNotificationStatusStmt: q.updateNotificationStatusStmt,
	}
}
